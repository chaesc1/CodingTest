#미래도시

# 방문 판매원 A는 회사가 모여 있는 공중 미래 도시에 있다
# 공중 미래 도시에는 1번부터 N번 까지의 회사가 있는데 특정 회사끼리는 서로 도로를 통해 연결되어있다,
#  방문 판매원 A는 현재 1번 회사에 위치 X번 회사에 방문해 물건을 판매하고자한다.
# 미래도시에서 특정 회사에 도착하기 위한 방법은 회사끼리 연결되어 있는 도로를 이용하는 방법이 유일함
# 연결된 2개의 회사는 양방향으로 이동 가능하다.
# 공중 미래 도시에서의 도로는 마하의 속도로 사람을 이동시켜주기 때문에 특정 회사와 다른 회사가 도로로 연결되어 있다면 정확히 1 만큼 시간으로 이동가능하다.
# 또한 오늘 판매원 A는 소개팅에도 참석하고자 한다. 소개팅의 상대는 K번 회사에 존재한다.
# A는 X번 회사에 가서 물건을 판매하기전에 먼저 소개팅 상대의 회사에 찾아가서 함께 커피를 마실 예정
# 따라서 판매원은 1번회사에서 출발 -> K번 회사에 들려서 커피 -> X번 회사에 가서 물건판매 알고리즘으로 진행된다.
# 가능한 빠르게 이동하고자 한다.
# 방문 판매원이 회사 사이를 이동하게 되는 최소시간을 계산하는 프로그램 작성 

#EX) N=5,X=4,K=5
#문제 풀이
#입력조건
# 1. 첫째 줄에 전체 회사의 개수 N, 경로의 개수M이 공백으로 차례대로 주어짐
# 2. 둘째 줄부터 M+1번째 줄에는 연결된 두 회사의 번호가 공백으로 구분되어 주어진다.
# 3. M + 2번째 줄에는 X와 K가 공배긍로 구분되어 차례대로 주어진다.

#노드의 개수 n,간선의 개수 m 설정
n, m = map(int,input().split())

INF = int(1e9)

#그래프 초기화
graph = [[INF]*(n + 1) for _ in range(n + 1)]

#자기 자신으로 가는 경우 거리를 0 으로 
for a in range(1,n+1):
    for b in range(1,n+1):
        if a == b:
            graph[a][b] = 0

#간선에 대한 모든 정보를 입력받아
for _ in range(m):
    a,b = map(int,input().split())
    #a에서b로
    graph[a][b] = 1
    graph[b][a] = 1
    #양방향 그래프이기 때문

#x(방문판매회사) 와 k(소개팅하는 회사) 입력받아
x,k = map(int,input().split())

#1->k->x
for k in range(1,n+1):
    for a in range(1,n+1):
        for b in range(1,n+1):
            graph[a][b] = min(graph[a][b],graph[a][k]+graph[k][b])

distance = graph[1][k]+graph[k][x]

if distance >= INF:
    print(-1)
else:
    print(distance)